---
- hosts: localhost
  connection: local
  become: true

  vars_files: 
    - main.yml

  tasks:

  - name: Install some common applications.
    apt:
      name: "{{ apps }}"
      state: latest
      update_cache: true
      cache_valid_time: 3600
    when: ansible_os_family == "Debian" 

  - name: NEOVIM BUILD - install dependencies for neovim.
    apt:
      name: "{{ depends }}"
      state: latest
      update_cache: true
      cache_valid_time: 3600
    when: ansible_os_family == "Debian" 

  - name: NEOVIM BUILD - Make sure that the neovim-runtime package from apt is not installed.
    apt:
      name: neovim-runtime
      state: absent
    when: ansible_os_family == "Debian" 
    

  - name: NEOVIM BUILD - get versions of all installed packages. 
    package_facts:
      manager: auto 

  - name: NEOVIM BUILD - Set Neovim's version number to variable. 
    set_fact:
      neovim_version: "{{ ansible_facts.packages['neovim']|
                          map(attribute='version')|
                          list }}" 
    when: "'neovim' in ansible_facts.packages"


  - block: 

    - name: NEOVIM BUILD - clone the neovim repo.
      git:
        repo: https://github.com/neovim/neovim
        dest: "/home/{{ username }}/neovim"

    - name: NEOVIM BUILD - run build commands.
      shell: | 
        cd /home/{{ username }}/neovim
        git checkout stable
        make CMAKE_BUILD_TYPE=RelWithDebInfo
        cd build && cpack -G DEB && sudo dpkg -i nvim-linux64.deb
    when: neovim_version is undefined or neovim_version != neovim_current

  - name: Check if files / folders exist and are symlinks.
    stat:
      path: "/home/{{ username }}/{{ item }}"
    register: symlink_check
    with_items: "{{ dot_files }}"

  - name: Delete any file or folder that is not a symlink.
    file:
      path: "{{ item.stat.path }}"
      state: absent
    when: item.stat.islnk is false 
    with_items: "{{ symlink_check.results }}"

  - name: check if the .local folder already exist.
    stat:
      path: "/home/{{ username }}/.local"
    register: local_exist


  - name: Create the .local folder if it doesn't exist.
    file:
      path: "/home/{{ username }}/.local"
      state: directory 
      owner: "{{ username }}"
      group: "{{ username }}"
      mode: 0755
    when: not local_exist.stat.exists

  - name: Install ssh private key.
    copy: 
      src: id_github
      dest: "/home/{{ username }}/.ssh/id_rsa"
      owner: "{{ username }}"
      group: "{{ username }}" 
      mode: 0600

  - name: git pull the repo to get the submodules.
    git:
      repo: git@github.com:BladeWDR/dotfiles.git
      dest: "/home/{{ username }}/git/dotfiles"
      accept_newhostkey: true
    become_user: "{{ username }}" 

  - name: Run dotbot setup script.
    shell: "/home/{{ username }}/git/dotfiles/install"
    become_user: "{{ username }}"
